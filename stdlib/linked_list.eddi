template<type T>
struct linked_list_node {
    T data;
    linked_list_node<T>* next;
    linked_list_node<T>* previous;

    this(T data, linked_list_node<T>* next, linked_list_node<T>* previous){
        this.data = data;
        this.next = next;
        this.previous = previous;
    }
}

template<type T>
struct linked_list {
    linked_list_node<T>* head;
    linked_list_node<T>* tail;
    int size;

    this(){
        size = 0;
    }

    void push_front(T value){
        if(size == 0){
            head = new linked_list_node<T>(value, (linked_list_node<T>*) null, (linked_list_node<T>*) null);
            tail = head;
        } else {
            linked_list_node<T>* node = new linked_list_node<T>(value, head, (linked_list_node<T>*) null);
            head.previous = node;
            head = node;
        }

        ++size;
    }

    void push_back(T value){
        if(size == 0){
            head = new linked_list_node<T>(value, (linked_list_node<T>*) null, (linked_list_node<T>*) null);
            tail = head;
        } else {
            linked_list_node<T>* node = new linked_list_node<T>(value, (linked_list_node<T>*) null, tail);
            tail.next = node;
            tail = node;
        }

        ++size;
    }

    void pop_front(){
        linked_list_node<T>* old = head;
        
        if(size == 1){
            tail = head = (linked_list_node<T>*) null;
        } else {
            head = head.next;
            head.previous = (linked_list_node<T>*) null;
        }
            
        delete old;

        --size;
    }

    void pop_back(){
        linked_list_node<T>* old = tail;

        if(size == 1){
            tail = head = (linked_list_node<T>*) null;
        } else {
            tail = tail.previous;
            tail.next = (linked_list_node<T>*) null;
        }
        
        delete old;

        --size;
    }

    T front(){
        return head.data;
    }

    T back(){
        return tail.data;
    }

    int size(){
        return size;
    }
    
    bool empty(){
        return size == 0;
    }
}
