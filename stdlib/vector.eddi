template<type T>
struct vector {
    T[] data;
    int size;

    this(){
        size = 0;
        data = (T[]) null;
    }

    ~this(){
        delete data;
    }

    bool empty(){
        return size == 0;
    }

    int size(){
        return size;
    }

    int capacity(){
        if(data == (T[]) null){
            return 0;
        } else {
            return size(data);
        }
    }

    T front(){
        return data[0];
    }

    T back(){
        return data[size - 1];
    }

    T at(int index){
        return data[index];
    }

    //Ensure capacity for one more element
    void ensure_capacity(){
        int current = capacity();
        
        if(current == 0){
            data = new T[1];
        } else if(size == current){
            T[] new_data = new T[capacity() * 2];

            for(int i = 0; i < size; ++i){
                new_data[i] = data[i];
            }

            delete data;
            data = new_data;
        }
    }

    void push_back(T value){
        ensure_capacity();

        data[size] = value;
        ++size;
    }

    void insert(int index, T value){
        ensure_capacity();
        
        for(int i = size - 1; i > index; --i){
            data[i] = data[i-1];
        }

        data[index] = value;

        ++size;
    }

    void remove(int index){
        for(int i = index; i < size - 1; ++i){
            data[i] = data[i+1];
        }

        --size;
    }

    void pop_back(){
        --size;
    }

    vector_iterator<T>* begin(){
        return new vector_iterator<T>(this, 0);
    }
    
    vector_iterator<T>* end(){
        return new vector_iterator<T>(this, size);
    }
}

template<type T>
struct vector_iterator {
    vector<T>* container;
    int current;

    this(vector<T>* container, int current){
        this.container = container;
        this.current = current;
    }

    void next(){
        ++current;
    }
    
    void previous(){
        --current;
    }

    bool not_over(){
        return current < container.size();
    }

    bool has_next(){
        return current < container.size() - 1;
    }

    bool has_previous(){
        return current > 0;
    }

    T get(){
        return container.at(current);
    }
}
